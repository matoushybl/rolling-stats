var searchIndex = JSON.parse('{\
"rolling_stats":{"doc":"Rolling stats is an implementation of a rolling buffer …","t":[3,8,3,3,8,12,11,11,12,0,11,11,11,10,11,11,10,11,11,0,10,11,0,0,12,10,11,11,11,11,11,11,8,10,3,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,3,8,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11],"n":["BigEndian","ConverterFromRaw","LittleEndian","RollingStats","Statistics","_e","borrow","borrow_mut","buffer","convertf32","default","flush","from","from_raw","into","len","mean","mean","new","partial_data_buffer","rand","rand","raw","reconstructor","reconstructor","std_dev","std_dev","try_from","try_into","type_id","vzip","write","LossyF32Convertible","convert","PartialDataBuffer","_e","_t","borrow","borrow_mut","buffer","clear","consume","default","from","into","try_from","try_into","type_id","type_size","vzip","BigEndian","ConverterFromRaw","LittleEndian","NotEnoughData","RawConversionError","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","from","from","from","from_raw","from_raw","from_raw","into","into","into","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Reconstructor","_e","borrow","borrow_mut","buffer","data","default","flush","from","intermediate_buffer","into","raw_data","try_from","try_into","type_id","vzip","write"],"q":["rolling_stats","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rolling_stats::convertf32","","rolling_stats::partial_data_buffer","","","","","","","","","","","","","","","","rolling_stats::raw","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rolling_stats::reconstructor","","","","","","","","","","","","","","","",""],"d":["The BigEndian struct represents raw bytes conversion …","Trait utilized for implementing conversion of raw bytes …","The LittleEndian struct represents raw bytes conversion …","Rolling stats is an implementation of a rolling buffer …","The <code>Statistics</code> trait useful for dependency injection. …","","","","","Integer types in Rust do not allow for converting them …","","","","Returns either the converted type from the raw input or …","","Returns the number of items currently stored in the …","Returns the mean of a dataset.","","Creates a new instance of the <code>RollingStats</code> with empty …","PartialDataBuffer represents a way of dealing with …","Returns a number from a standard distribution specified …","","Abstraction of conversion of raw bytes into specific …","Reconstructor serves as a raw data stream parser that …","","Returns standard deviation of a dataset.","","","","","","","","Convert <code>self</code> into a float.","Implements the partial data buffer - handling of …","","","","","","Clears the inner buffer, discarding the contained data.","Consumes the input slice of raw data, if enough data is …","Creates an empty buffer.","","","","","","Returns the size in bytes of the type meant to be …","","The BigEndian struct represents raw bytes conversion …","Trait utilized for implementing conversion of raw bytes …","The LittleEndian struct represents raw bytes conversion …","","An Error returned by the <code>ConverterFromRaw</code> trait on …","","","","","","","","","","","","","","Returns either the converted type from the raw input or …","","","","","","","","","","","","","","","","","","","","Reconstructor is a structure that holds all of the …","","","","A buffer that stores the parsed data.","Returns an iterator over references to the parsed data.","","Clears the data buffer.","","A buffer that stores leftower raw data.","","Returns the parsed data as a raw slice.","","","","","Parses the raw data into the concrete types and stores …"],"i":[0,0,0,0,0,1,1,1,1,0,1,1,1,2,1,1,3,1,1,0,3,1,0,0,1,3,1,1,1,1,1,1,0,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,6,0,7,8,6,7,8,6,6,6,6,6,7,8,6,2,7,8,7,8,6,6,6,7,8,6,7,8,6,7,8,6,7,8,6,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],"f":[null,null,null,null,null,null,[[]],[[]],null,null,[[]],[[],["result",6]],[[]],[[],[["result",4],["rawconversionerror",4]]],[[]],[[],["usize",15]],[[],["f32",15]],[[],["f32",15]],[[]],null,[[],["f32",15]],[[],["f32",15]],null,null,null,[[],["f32",15]],[[],["f32",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],[["usize",15],["result",6]]],null,[[],["f32",15]],null,null,null,[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["rawconversionerror",4]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],[["result",4],["rawconversionerror",4]]],[[],[["result",4],["i32",15],["rawconversionerror",4]]],[[],[["result",4],["i32",15],["rawconversionerror",4]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,[[]],[[]],null,[[]],[[]],[[],["result",6]],[[]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],[["usize",15],["result",6]]]],"p":[[3,"RollingStats"],[8,"ConverterFromRaw"],[8,"Statistics"],[8,"LossyF32Convertible"],[3,"PartialDataBuffer"],[4,"RawConversionError"],[3,"LittleEndian"],[3,"BigEndian"],[3,"Reconstructor"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};